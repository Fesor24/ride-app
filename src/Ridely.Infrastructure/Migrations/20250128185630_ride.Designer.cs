// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ridely.Infrastructure;

#nullable disable

namespace Ridely.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250128185630_ride")]
    partial class ride
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ridely.Domain.Call.CallLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CallEndUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CallStartUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Caller")
                        .HasColumnType("integer");

                    b.Property<int>("DurationInSeconds")
                        .HasColumnType("integer");

                    b.Property<int>("Recipient")
                        .HasColumnType("integer");

                    b.Property<long>("RideId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RideId");

                    b.ToTable("CallLog", "rds");
                });

            modelBuilder.Entity("Ridely.Domain.Common.Bank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Bank", "com");
                });

            modelBuilder.Entity("Ridely.Domain.Common.Settings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("BaseFare")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DeliveryRatePerKilometer")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DriverCommissionFromRide")
                        .HasColumnType("numeric");

                    b.Property<string>("EmergencyLines")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PremiumCab")
                        .HasColumnType("integer");

                    b.Property<decimal>("RatePerKilometer")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RatePerMinute")
                        .HasColumnType("numeric");

                    b.Property<string>("SupportEmails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SupportPhoneNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Settings", "com");
                });

            modelBuilder.Entity("Ridely.Domain.Drivers.BankAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<long>("BankId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DriverId")
                        .HasColumnType("bigint");

                    b.Property<string>("RecipientCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("DriverId");

                    b.ToTable("BankAccount", "drv");
                });

            modelBuilder.Entity("Ridely.Domain.Drivers.Cab", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CabType")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LicensePlateNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("Cab", "drv");
                });

            modelBuilder.Entity("Ridely.Domain.Drivers.Driver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AvgRatings")
                        .HasColumnType("numeric");

                    b.Property<long>("CabId")
                        .HasColumnType("bigint");

                    b.Property<int>("CompletedTrips")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CurrentRideId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DeviceTokenId")
                        .HasColumnType("text");

                    b.Property<int>("DriverService")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IdentityValidated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBarred")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeactivated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision");

                    b.Property<string>("LicenseImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LicenseImageUrlExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicenseNo")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<double>("Long")
                        .HasColumnType("double precision");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProfileImageUrlExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferralCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("ReferredByUser")
                        .HasColumnType("integer");

                    b.Property<long?>("ReferredByUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RideRequestsDeclined")
                        .HasColumnType("integer");

                    b.Property<int>("RidesRated")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ZeroCommissionRidesExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CabId");

                    b.HasIndex("Email");

                    b.HasIndex("PhoneNo");

                    b.HasIndex("ReferralCode")
                        .IsUnique();

                    b.ToTable("Driver", "drv");
                });

            modelBuilder.Entity("Ridely.Domain.Drivers.DriverReferrers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DriverId")
                        .HasColumnType("bigint");

                    b.Property<int>("ReferredUser")
                        .HasColumnType("integer");

                    b.Property<long>("ReferredUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("DriverReferrers", "drv");
                });

            modelBuilder.Entity("Ridely.Domain.Drivers.DriverTransactionHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("BankAccountDetails")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DriverId")
                        .HasColumnType("bigint");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("Reference");

                    b.ToTable("DriverTransactionHistory", "drv");
                });

            modelBuilder.Entity("Ridely.Domain.Drivers.DriverWallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AvailableBalance")
                        .HasColumnType("numeric");

                    b.Property<long>("DriverId")
                        .HasColumnType("bigint");

                    b.Property<string>("Pin")
                        .HasColumnType("text");

                    b.Property<string>("PinResetCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PinResetCodeExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalBalance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("DriverWallet", "drv");
                });

            modelBuilder.Entity("Ridely.Domain.Riders.PaymentCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AuthorizationCode")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<int>("CardType")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ExpiryMonth")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ExpiryYear")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Last4Digits")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<long>("RiderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("RiderId");

                    b.ToTable("PaymentCard", "rdr");
                });

            modelBuilder.Entity("Ridely.Domain.Riders.Rider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CurrentRideId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DeviceTokenId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBarred")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeactivated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision");

                    b.Property<double>("Long")
                        .HasColumnType("double precision");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ProfileImageUrlExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferralCode")
                        .HasColumnType("text");

                    b.Property<int>("ReferredByUser")
                        .HasColumnType("integer");

                    b.Property<long?>("ReferredByUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("PhoneNo");

                    b.HasIndex("ReferralCode")
                        .IsUnique();

                    b.ToTable("Rider", "rdr");
                });

            modelBuilder.Entity("Ridely.Domain.Riders.RiderReferrers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ReferredUser")
                        .HasColumnType("integer");

                    b.Property<long>("ReferredUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RiderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RiderId");

                    b.ToTable("RiderReferrers", "rdr");
                });

            modelBuilder.Entity("Ridely.Domain.Riders.RiderTransactionHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<long>("RiderId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Reference");

                    b.HasIndex("RiderId");

                    b.ToTable("RiderTransactionHistory", "rdr");
                });

            modelBuilder.Entity("Ridely.Domain.Riders.RiderWallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AvailableBalance")
                        .HasColumnType("numeric");

                    b.Property<string>("Pin")
                        .HasColumnType("text");

                    b.Property<string>("PinResetCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PinResetCodeExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("RiderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalBalance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("RiderWallet", "rdr");
                });

            modelBuilder.Entity("Ridely.Domain.Riders.SavedLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LocationType")
                        .HasColumnType("integer");

                    b.Property<long>("RiderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RiderId");

                    b.ToTable("SavedLocation", "rdr");
                });

            modelBuilder.Entity("Ridely.Domain.Rides.Chat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Recipient")
                        .HasColumnType("integer");

                    b.Property<long>("RecipientId")
                        .HasColumnType("bigint");

                    b.Property<long>("RideId")
                        .HasColumnType("bigint");

                    b.Property<int>("Sender")
                        .HasColumnType("integer");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RideId");

                    b.ToTable("Chat", "rds");
                });

            modelBuilder.Entity("Ridely.Domain.Rides.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Error")
                        .HasColumnType("jsonb");

                    b.Property<int>("Method")
                        .HasColumnType("integer");

                    b.Property<long?>("PaymentCardId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Payment", "rds");
                });

            modelBuilder.Entity("Ridely.Domain.Rides.Ratings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Feedback")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<long>("RideId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RideId");

                    b.ToTable("Ratings", "rds");
                });

            modelBuilder.Entity("Ridely.Domain.Rides.Ride", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DestinationCordinates")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("DistanceInMeters")
                        .HasColumnType("double precision");

                    b.Property<long?>("DriverId")
                        .HasColumnType("bigint");

                    b.Property<long>("EstimatedDeliveryFare")
                        .HasColumnType("bigint");

                    b.Property<int>("EstimatedDurationInSeconds")
                        .HasColumnType("integer");

                    b.Property<long>("EstimatedFare")
                        .HasColumnType("bigint");

                    b.Property<bool>("HaveConversation")
                        .HasColumnType("boolean");

                    b.Property<int>("MusicGenre")
                        .HasColumnType("integer");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReassignFromId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReassignReason")
                        .HasColumnType("text");

                    b.Property<long>("RiderId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceCordinates")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("WayPointAddresses")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WaypointCordinates")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ReassignFromId");

                    b.HasIndex("RiderId");

                    b.ToTable("Ride", "rds");
                });

            modelBuilder.Entity("Ridely.Domain.Rides.RideLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("RideId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RideId");

                    b.ToTable("RideLog", "rds");
                });

            modelBuilder.Entity("Ridely.Domain.Transactions.TransactionLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.HasKey("Id");

                    b.ToTable("TransactionLog", "trx");
                });

            modelBuilder.Entity("Ridely.Domain.Transactions.TransactionReferenceMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TransactionReferenceMap", "trx");
                });

            modelBuilder.Entity("Ridely.Domain.Users.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.HasKey("Id");

                    b.ToTable("Permission", "usr");
                });

            modelBuilder.Entity("Ridely.Domain.Users.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Role", "usr");
                });

            modelBuilder.Entity("Ridely.Domain.Users.RolePermission", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission", "usr");
                });

            modelBuilder.Entity("Ridely.Domain.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("PhoneNo");

                    b.HasIndex("RoleId");

                    b.ToTable("User", "usr");
                });

            modelBuilder.Entity("Ridely.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTime>("OccurredAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages", "com");
                });

            modelBuilder.Entity("Ridely.Domain.Call.CallLog", b =>
                {
                    b.HasOne("Ridely.Domain.Rides.Ride", null)
                        .WithMany("CallLogs")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ridely.Domain.Drivers.BankAccount", b =>
                {
                    b.HasOne("Ridely.Domain.Common.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ridely.Domain.Drivers.Driver", null)
                        .WithMany("BankAccounts")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("Ridely.Domain.Drivers.Driver", b =>
                {
                    b.HasOne("Ridely.Domain.Drivers.Cab", "Cab")
                        .WithMany()
                        .HasForeignKey("CabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cab");
                });

            modelBuilder.Entity("Ridely.Domain.Drivers.DriverReferrers", b =>
                {
                    b.HasOne("Ridely.Domain.Drivers.Driver", "Driver")
                        .WithMany("DriverReferrers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Ridely.Domain.Drivers.DriverTransactionHistory", b =>
                {
                    b.HasOne("Ridely.Domain.Drivers.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Ridely.Domain.Riders.PaymentCard", b =>
                {
                    b.HasOne("Ridely.Domain.Riders.Rider", "Rider")
                        .WithMany("PaymentCards")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("Ridely.Domain.Riders.RiderReferrers", b =>
                {
                    b.HasOne("Ridely.Domain.Riders.Rider", "Rider")
                        .WithMany("Referrers")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("Ridely.Domain.Riders.RiderTransactionHistory", b =>
                {
                    b.HasOne("Ridely.Domain.Riders.Rider", "Rider")
                        .WithMany()
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("Ridely.Domain.Riders.SavedLocation", b =>
                {
                    b.HasOne("Ridely.Domain.Riders.Rider", null)
                        .WithMany("SavedLocations")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ridely.Domain.Rides.Chat", b =>
                {
                    b.HasOne("Ridely.Domain.Rides.Ride", null)
                        .WithMany("Chats")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ridely.Domain.Rides.Ratings", b =>
                {
                    b.HasOne("Ridely.Domain.Rides.Ride", "Ride")
                        .WithMany()
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("Ridely.Domain.Rides.Ride", b =>
                {
                    b.HasOne("Ridely.Domain.Drivers.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Ridely.Domain.Rides.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ridely.Domain.Rides.Ride", "ReassignFrom")
                        .WithMany()
                        .HasForeignKey("ReassignFromId");

                    b.HasOne("Ridely.Domain.Riders.Rider", "Rider")
                        .WithMany()
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Payment");

                    b.Navigation("ReassignFrom");

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("Ridely.Domain.Rides.RideLog", b =>
                {
                    b.HasOne("Ridely.Domain.Rides.Ride", "Ride")
                        .WithMany("RideLogs")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("Ridely.Domain.Users.RolePermission", b =>
                {
                    b.HasOne("Ridely.Domain.Users.Permission", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ridely.Domain.Users.Role", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ridely.Domain.Users.User", b =>
                {
                    b.HasOne("Ridely.Domain.Users.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Ridely.Domain.Drivers.Driver", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("DriverReferrers");
                });

            modelBuilder.Entity("Ridely.Domain.Riders.Rider", b =>
                {
                    b.Navigation("PaymentCards");

                    b.Navigation("Referrers");

                    b.Navigation("SavedLocations");
                });

            modelBuilder.Entity("Ridely.Domain.Rides.Ride", b =>
                {
                    b.Navigation("CallLogs");

                    b.Navigation("Chats");

                    b.Navigation("RideLogs");
                });

            modelBuilder.Entity("Ridely.Domain.Users.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Ridely.Domain.Users.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
